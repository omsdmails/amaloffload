# .github/workflows/build-windows.yml

##
## Workflow: Build & Release Binaries for Windows, Linux & macOS
##

name: Build & Release Binaries

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Clean dist folder
        run: rm -rf dist

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          echo "requirements.txt exists? $( [ -f requirements.txt ] && echo yes || echo no )"
          python3 -m pip install --upgrade pip==23.2.1 wheel setuptools || { echo "❌ Failed upgrading pip"; exit 1; }
          if [ -f requirements.txt ]; then
            python3 -m pip install --retries 3 --timeout 30 -r requirements.txt || { echo "❌ Dependency install failed"; exit 1; }
          else
            python3 -m pip install --retries 3 --timeout 30 -e . || { echo "❌ Editable install failed"; exit 1; }
          fi
          python3 -m pip install pyinstaller==5.13.0 || { echo "❌ PyInstaller install failed"; exit 1; }

      - name: Run Linter
        run: |
          python3 -m pip install flake8==6.0.0
          python3 -m flake8 . --exit-zero

      - name: Run Tests
        run: python3 -m unittest discover tests

      - name: Verify dist folder
        run: |
          if [ ! -d dist ] || [ -z "$(ls dist)" ]; then
            echo "❌ dist/ folder is missing or empty!"
            exit 1
          fi

      - name: Build executable
        shell: bash
        run: |
          case "${{ matrix.os }}" in
            windows-latest)
              python3 -m PyInstaller --onefile --name OffloadHelper main.py
              ;;
            ubuntu-latest)
              python3 -m PyInstaller --onefile --name offloadhelper_linux main.py
              ;;
            macos-latest)
              python3 -m PyInstaller --onefile --target-arch x86_64 --name offloadhelper_macos_x86 main.py
              python3 -m PyInstaller --onefile --target-arch arm64  --name offloadhelper_macos_arm main.py
              lipo -create dist/offloadhelper_macos_x86 dist/offloadhelper_macos_arm -output dist/offloadhelper_macos
              ;;
          esac

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: offloadhelper-${{ matrix.os }}-${{ github.run_number }}
          path: |
            dist/OffloadHelper.exe
            dist/offloadhelper_linux
            dist/offloadhelper_macos

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: offloadhelper-${{ matrix.os }}-${{ github.run_number }}
          path: release_assets

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.run_number }}
          name: Release ${{ github.run_number }}
          body: |
            Automated build for OS: ${{ matrix.os }}.
          files: release_assets/**

  notify:
    if: always()
    runs-on: ubuntu-latest
    needs: [build, release]
    steps:
      - name: Notify on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        with:
          status: ${{ job.status }}
          fields: repo,commit,message
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
